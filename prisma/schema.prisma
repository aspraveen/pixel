// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  twitter       String?
  isAdmin       Boolean @default(false)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  medias        Media[]
  diarys        Diary[]
  guestbooks    GuestBook[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post{
  id Int @id @default(autoincrement())
  title String @db.VarChar(200)
  slug String @db.VarChar(100) @unique
  intro String @db.VarChar(250)
  details Json
  status Int @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publishedAt DateTime
  userId String
  views Int @default(0)
  likes Int @default(0)
  user  User  @relation(fields: [userId], references: [id], onDelete: Restrict)
  categoryId String
  category Category @relation(fields: [categoryId],references: [id],onDelete: Restrict)
}

model Category{
  id String @id @default(cuid())
  name String @db.VarChar(25)
  createdAt DateTime @default(now())
  posts Post[]
}

model Media{
  id Int @id @default(autoincrement())
  name String @db.VarChar(200) @unique
  fileName String @db.VarChar(200) @unique
  uri  String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId],references: [id], onDelete: Restrict)
}

model Tracker{
  id  Int @id @default(autoincrement())
  postId Int
  activity String @db.VarChar(10)
  ipAddress String @db.VarChar(25)
  createdAt DateTime @default(now())
}

model GuestBook{
  id Int @id @default(autoincrement())
  comment String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  captchaScore String @db.VarChar(10)
  status Boolean @default(true)
  ip  String? @db.VarChar(25)
  browser String? @db.Text
  userId String
  user User @relation(fields:[userId],references: [id],onDelete: Cascade)
}

model Diary{
  id Int @id @default(autoincrement())
  userId String
  transDate DateTime
  title String? @db.VarChar(255)
  details String @db.Text
  amount Decimal?
  currency String? @db.VarChar(5)
  paymentMethod String? @db.VarChar(25)
  category String? @db.VarChar(25)
  tags String? @db.VarChar(255)
  people String? @db.VarChar(255)
  places String? @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete:Cascade)
}